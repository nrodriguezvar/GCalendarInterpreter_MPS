package GCalendarInterpreter.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Color;
  private ConceptPresentation props_Descripcion;
  private ConceptPresentation props_Evento;
  private ConceptPresentation props_FechaFin;
  private ConceptPresentation props_FechaInicio;
  private ConceptPresentation props_ListCampos;
  private ConceptPresentation props_Titulo;
  private ConceptPresentation props_Ubicacion;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Color:
        if (props_Color == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Color");
          props_Color = cpb.create();
        }
        return props_Color;
      case LanguageConceptSwitch.Descripcion:
        if (props_Descripcion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Descripcion");
          props_Descripcion = cpb.create();
        }
        return props_Descripcion;
      case LanguageConceptSwitch.Evento:
        if (props_Evento == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Evento");
          props_Evento = cpb.create();
        }
        return props_Evento;
      case LanguageConceptSwitch.FechaFin:
        if (props_FechaFin == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FechaFin");
          props_FechaFin = cpb.create();
        }
        return props_FechaFin;
      case LanguageConceptSwitch.FechaInicio:
        if (props_FechaInicio == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FechaInicio");
          props_FechaInicio = cpb.create();
        }
        return props_FechaInicio;
      case LanguageConceptSwitch.ListCampos:
        if (props_ListCampos == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ListCampos");
          props_ListCampos = cpb.create();
        }
        return props_ListCampos;
      case LanguageConceptSwitch.Titulo:
        if (props_Titulo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Titulo");
          props_Titulo = cpb.create();
        }
        return props_Titulo;
      case LanguageConceptSwitch.Ubicacion:
        if (props_Ubicacion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Ubicacion");
          props_Ubicacion = cpb.create();
        }
        return props_Ubicacion;
    }
    return null;
  }
}
